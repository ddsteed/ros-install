#!/usr/bin/env  bash

#-----------------------------------------------------------------------------------
# This script is to install ros from source
#
# Author: Hao Feng (F1)
# Date:   Feb. 22, 2022
#
# Copyright (c) 2021, FATAVAY CO., LTD.
#-----------------------------------------------------------------------------------

#- set global varialbles

export roshome=/Users/fengh/Research/ROS
export rosbin=/opt/ros

export distribution_default=noetic
export run_default=install
export rosenv_default=envtools
export step_default=compile
export compiler_default=clang
export package_default=all

export os=`uname`
export shell_dir=$(cd "$(dirname "$0")";pwd)

#-----------------------------------------------------------------------------------
function print_welcome {
    # ---
    echo
    echo "* ----------------------------------------------------------------- "
    echo "* This script is to install/remove ROS distribution from source ... "

    # ---
    echo
    echo "* ------- "
    echo "* specify ros distribution name ... "
    echo
    echo  "         ROS1: noetic|melodic "
    echo  "         ROS2: foxy "
    echo
    echo -n " * Please input ros name, [$distribution_default]: "
    read distribution
    if [[ $distribution == "" ]]; then export distribution=$distribution_default; fi

    # ---
    echo
    echo "* ------- "
    echo "* specify run mode ... "
    echo
    echo -n "* Please input run mode: install/remove, [$run_default]: "
    read run
    if [[ $run == "" ]]; then export run=$run_default; fi

    # ---
    echo
    echo "* ------- "
    echo "* specify step ... "
    echo
    echo -n "* Please input step: all/auxilary/getsrc/compile, [$step_default]: "
    read step
    if [[ $step == "" ]]; then export step=$step_default; fi

    # ---
    catkin_default=$roshome/${distribution}
    echo
    echo "* ------- "
    echo "* specify ros source directory ... "
    echo
    echo -n "* Please input the ros source directory, [$catkin_default]: "
    read catkin
    if [[ $catkin == "" ]]; then export catkin=$catkin_default; fi

    # ---
    export bipath=$rosbin/${distribution}_src
    mkdir -p $bipath
    echo "The build & install base is: $bipath"

    # ---
    echo
    echo "* ------- "
    echo "* specify ros virtual envrionment directory ... "
    echo
    echo -n "* Please input the ros virtual environment directory, [$bipath/../$rosenv_default]: "
    read rosenv
    if [[ $rosenv == "" ]]; then export rosenv=$bipath/../$rosenv_default; fi
        
    # ---
    if [[ $step == "all" || $step == "compile" ]]; then
        echo
        echo "* ------- "
        echo "* specify compilers ... "
        echo
        echo -n "* Please input compilers: clang/gnu/intel, [$compiler_default]: "
        read compiler
        if [[ $compiler == "" ]]; then export compiler=$compiler_default; fi

        echo
        echo "* ------- "
        echo "* specify package to be compiled ..."
        echo
        echo -n "* Please input package name, [$package_default]: "
        read package
        if [[ $package == "" ]]; then export package=$package_default; fi
    fi
}

#-----------------------------------------------------------------------------------
function set_path {
    case $os in
        Darwin)
            source ~/Init/x86
            ;;
        Linux)
            ;;
    esac

    export PATH="/usr/local/bin:$PATH"
}

#-----------------------------------------------------------------------------------
function set_auxilary {
    case $os in
        Darwin)
            brew_tools

            pip_tools
            src_tools sip pyqt urdfdom ogre log4cxx
            ;;
        Linux)
            set_locale
            add_apt_repository
            apt_tools

            pip_tools
            src_tools sip pyqt urdfdom ogre log4cxx
            ;;
    esac
}

#-----------------------------------------------------------------------------------
function set_locale {
    echo
    echo "* ------ "
    echo "* set locale ... "
    echo

    case $distribution in
        melodic | noetic)
            ;;
        foxy)
            locale  # check for UTF-8

            sudo apt update && sudo apt install locales
            sudo locale-gen en_US en_US.UTF-8
            sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
            export LANG=en_US.UTF-8

            locale  # verify settings
            ;;
    esac
}

#-----------------------------------------------------------------------------------
function add_apt_repository {
    echo
    echo "* ------ "
    echo "* add apt repository ..."
    echo

    case $distribution in
        melodic | noetic)
            ;;
        foxy)
            sudo apt install software-properties-common
            sudo add-apt-repository universe

            sudo apt update && sudo apt install curl gnupg lsb-release
            #   sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key  \
            #        -o /usr/share/keyrings/ros-archive-keyring.gpg

            sudo cp $shell_dir/ros.key /usr/share/keyrings/ros-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(source /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
            sudo -E apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
            ;;
    esac
}

#-----------------------------------------------------------------------------------
function apt_tools {
    case $distribution in
        melodic | noetic)
            lib=(python3-rosdep python3-rosinstall-generator python3-vcstool \
                     build-essential liborocos-kdl-dev libogre-1.12 liblog4cxx-dev \
                     libgpgme-dev liburdfdom-dev) 

            # X org dependencies
            lib=(${lib[@]} xorg-dev libxrandr-dev libxcursor-dev)
            ;;
        foxy)
            lib=(build-essential \
                     cmake git libbullet-dev liblog4cxx-dev libeigen3-dev \
                     libboost-all-dev libbz2-dev \
                     librosconsole-bridge-dev libpoco-doc libpoco-dev \
                     libtinyxml-dev libtinyxml-doc \
                     libopencv-dev python3-opencv \
                     python3-colcon-common-extensions python3-flake8 \
                     python3-pip python3-pytest-cov python3-rosdep \
                     python-sip python-sip-dev python-sip-doc python-sip-dbg \
                     python3-setuptools python3-vcstool python3-venv \
                     qt5-default)

            # install Fast-RTPS dependencies
            lib=(${lib[@]} libasio-dev libtinyxml2-dev)

            # install Cyclone DDS dependencies
            lib=(${lib[@]} libcunit1-dev)

            # X org dependencies
            lib=(${lib[@]} xorg-dev libxrandr-dev libxcursor-dev)
            ;;
    esac

    echo
    echo "* ------ "
    echo "* apt $run some stuff ... "
    echo
    sudo apt update
    sudo apt $run --no-install-recommends -y ${lib[@]}
}

#-----------------------------------------------------------------------------------
function brew_tools {
    echo
    echo "* ------ "
    echo "* brew $run some stuff ... "
    echo

    if [[ $run == "remove" ]]; then
        opt1=-f
        opt2=--ignore-dependencies
    fi

    case $distribution in
        melodic | noetic)
            ibrew tap ros/deps
            ibrew tap osrf/simulation

            lib=(libyaml opencv)
            lib=(${lib[@]} cmake graphviz qt@5)
            lib=(${lib[@]} orocos-kdl boost boost-python3 gpgme log4cxx openssl)
            lib=(${lib[@]} qt5 pyqt5 sip)
            ;;
        foxy)
            lib=(bullet cmake cppcheck eigen pcre poco tinyxml wget)
            
            lib=(${lib[@]} asio tinyxml2)        # dependencies for Fast-RTPS if you are using it
            lib=(${lib[@]} opencv)
            
            lib=(${lib[@]} console_bridge)       # console_bridge for rosbag2
            lib=(${lib[@]} openssl)              # OpenSSL for DDS-Security
            lib=(${lib[@]} log4cxx spdlog)       # dependencies for rcl_logging
            lib=(${lib[@]} bison cunit)          # dependencies for Cyclone DDS
            lib=(${lib[@]} qt@5 freetype assimp) # dependencies for Rviz
            lib=(${lib[@]} graphviz sip)         # rqt dependencies
            ;;
    esac
    
    
}

#-----------------------------------------------------------------------------------
function pip_tools {
    echo
    echo "* ------- "
    echo "* pip $run some stuff ... "
    echo

    case $distribution in
        melodic | noetic)
            if [[ $os == "Darwin" ]]; then
                lib=(setuptools rosdep rosinstall_generator wstool rosinstall catkin_tools bloom empy sphinx pycurl)
                lib=(${lib[@]} vcstool wheel pygraphviz pydot numpy)
            elif [[ $os == "Linux" ]]; then
                lib=(rosdep rosinstall_generator vcstool empy numpy)
            fi
            ;;
        foxy)
            if [[ $os == "Darwin" ]]; then
                lib=(rosdep rosinstall_generator vcstool \
                            argcomplete catkin_pkg colcon-common-extensions coverage \
                            cryptography empy flake8 flake8-blind-except flake8-builtins \
                            flake8-class-newline flake8-comprehensions flake8-deprecated \
                            flake8-docstrings flake8-import-order flake8-quotes ifcfg \
                            importlib-metadata lark lark-parser lxml mock mypy netifaces \
                            nose numpy pep8 pydocstyle pydot pygraphviz pyparsing pyqt5\
                            pytest-mock rosdep setuptools vcstool rosdistro)
            elif [[ $os == "Linux" ]]; then
                lib=(rosdep rosinstall_generator vcstool \
                            argcomplete catkin_pkg empy \
                            flake8-blind-except flake8-builtins flake8-class-newline \
                            flake8-comprehensions flake8-deprecated flake8-docstrings \
                            flake8-import-order flake8-quotes \
                            lark numpy pyqt5 \
                            pytest-repeat pytest-rerunfailures pytest)
            fi
            ;;
    esac
    
    case $run in
        install)
            echo "   - create virtual python environment ..."
            python3 -m venv   $rosenv
            source $rosenv/bin/activate
            $rosenv/bin/python3 -m pip install --upgrade pip

            echo 
            echo "   - $run pip packages in $rosenv ... "
            echo "     -------- "

            opt="--global-option=build_ext --global-option='-I/usr/local/include/' \
                 --global-option='-L/usr/local/lib' "

            for app in ${lib[@]}; do
                echo
                echo "      ----------------------------------------- "
                echo "      ... $app is now being installed ..."
                echo "      ----------------------------------------- "
                echo
                if [[ $app == pygraphviz ]]; then
                    pip3 $run $opt $app
                else
                    pip3 $run -U $app
                fi
            done
            
            pip3 $run --upgrade setuptools
            ;;
        remove)
            echo "   - $run pip packages in $rosenv ... "
            echo "     -------- "
            echo
            source $rosenv/bin/activate && pip3 uninstall -y ${lib[@]}

            echo "   - delete virtual python environment $rosenv ... "
            rm -rf $rosenv
            ;;
    esac

}

#-----------------------------------------------------------------------------------
# 1. some tools/libraries, like sip/PyQt/urdfdom could NOT be found or called properly
#    if installed by brew/apt, so they have to be installed manually.
# 2. log4cxx adds shared_ptr since 0.12.0, which could be used ONLY for ROS2-rosconsole.
#    However, ROS1-rosconsole use ordinary pointer, so log4cxx with lower version has to
#    be installed manually for ROS1.
#
# sip/PyQt/urdfdom/OGRE/log4cxx

function src_tools {
    source $rosenv/bin/activate

    # set versions
    vsip=4.19.13
    vpyqt=5.11.3
    vurdfdom=master
    vogre=13.3.0
    vlog4=0.10.0

    for app in $@; do
        case $app in
            sip)
                # install SIP first
                echo 
                echo "   - install sip manually ..."
                echo "     ----------- "
                echo
                mkdir -p $rosenv/tmp && cd $rosenv/tmp

                if [[ ! -f $rosenv/bin/sip ]]; then
                    if [ ! -f "sip-$vsip.tar.gz" ]; then
#                       wget https://sourceforge.net/projects/pyqt/files/sip/sip-$vsip/sip-$vsip.tar.gz
                        wget https://distfiles.macports.org/py-sip/sip-$vsip.tar.gz
                    fi

                    tar xzf sip-$vsip.tar.gz
                    cd sip-$vsip
                    python3 ./configure.py
                    make
                    make install
                    cd .. && rm -rf sip-$vsip
                else
                    echo
                    echo "     - sip has been installed."
                    echo
                fi
                ;;
            pyqt)
                # install pyqt
                echo 
                echo "   - install PyQt manually ..."
                echo "     ------------ "
                echo
                mkdir -p $rosenv/tmp && cd $rosenv/tmp

                if [ ! -d "$rosenv/PyQt5" ]; then
                    if [ ! -f "PyQt5_gpl-$vpyqt.tar.gz" ]; then
                        wget https://sourceforge.net/projects/pyqt/files/PyQt5/PyQt-$vpyqt/PyQt5_gpl-$vpyqt.tar.gz
                    fi

                    tar xzf PyQt5_gpl-$vpyqt.tar.gz
                    cd PyQt5_gpl-$vpyqt

                    if [[ $os == "Darwin" ]]; then
                        export PATH="$(ibrew --prefix qt@5)/bin:$PATH"
                    fi
                    
                    yes yes | python3 ./configure.py --sip $rosenv/bin/sip --destdir $rosenv
                    make -j 8
                    make install
                    cd .. && rm -rf PyQt5_gpl-$vpyqt
                else
                    echo
                    echo "     - PyQt has been installed."
                    echo
                fi

                # ROS 2 needs pyqt5.sip module
                echo 
                echo "   - install pyqt5.sip module ..."
                echo "     ----------------- "
                echo
                pip3 $run -U pyqt5.sip
                ;;
            urdfdom)
                # install urdfdom
                echo 
                echo "   - install urdfdom manually ..."
                echo "     --------------- "
                echo
                mkdir -p $rosenv/tmp && cd $rosenv/tmp

                if  [ ! -d "$rosenv/lib/urdfdom" ]; then
                    if [ ! -f "urdfdom-$vurdfdom.zip" ]; then
                        wget https://codeload.github.com/ros/urdfdom/zip/refs/heads/master -O urdfdom-master.zip
                    fi

                    unzip urdfdom-$vurdfdom.zip
                    cd urdfdom-$vurdfdom && mkdir -p build && cd build
                    cmake -DCMAKE_INSTALL_PREFIX=$rosenv ..
                    make -j 8
                    make install

                    cd ../.. && rm -rf urdfdom-$vurdfdom
                else
                    echo
                    echo "     - urdfdom has been installed."
                    echo
                fi
                ;;
            ogre)
                # install OGRE
                echo 
                echo "   - install OGRE manually ..."
                echo "     ------------ "
                echo
                mkdir -p $rosenv/tmp && cd $rosenv/tmp

                if [[ ! -f "$rosenv/lib/libOgreBitesQt.dylib" && ! -f "$rosenv/lib/libOgreBitesQt.so" ]]; then
                    if [ ! -f "ogre-$vogre.zip" ]; then
                        wget https://codeload.github.com/OGRECave/ogre/zip/refs/tags/v$vogre -O ogre-$vogre.zip
                    fi

                    unzip ogre-$vogre.zip
                    cd ogre-$vogre && mkdir -p build && cd build

                    if [[ $os == "Darwin" ]]; then
                        export PATH="/usr/local/opt/openjdk/bin:$PATH"
                        export CXXFLAGS="-I/usr/local/opt/openjdk/include $CXXFLAGS"
                    fi

                    cmake -D CMAKE_INSTALL_PREFIX=$rosenv ..
                    make -j 8
                    make install

                    cd ../.. && rm -rf ogre-$vogre
                else
                    echo
                    echo "     - OGRE has been installed."
                    echo
                fi
                ;;
            log4cxx)
                # install log4cxx
                if [[ $distribution == foxy ]]; then
                    continue
                fi
                
                echo 
                echo "   - install log4cxx manually ..."
                echo "     --------------- "
                echo
                mkdir -p $rosenv/tmp && cd $rosenv/tmp

                if  [ ! -d "$rosenv/include/log4cxx" ]; then
                    if [ ! -f "apache-log4cxx-$vlog4.tar.gz" ]; then
                        wget https://archive.apache.org/dist/logging/log4cxx/$vlog4/apache-log4cxx-$vlog4.tar.gz -O apache-log4cxx-$vlog4.tar.gz
                    fi

                    tar zxvf apache-log4cxx-$vlog4.tar.gz
                    cd apache-log4cxx-$vlog4

                    sed -e 's/namespace std { class locale; }/#include <locale>>/' src/main/include/log4cxx/helpers/simpledateformat.h > simpledateformat.h.tmp
                    mv  simpledateformat.h.tmp  src/main/include/log4cxx/helpers/simpledateformat.h

                    mkdir -p build && cd build

                    if [[ `uname` == "Darwin" ]]; then
                        CC='arch -x86_64 clang' CXX='arch -x86_64 clang++' ../configure --prefix=$rosenv --with-apr=/usr/local/opt/apr --with-apr-util=/usr/local/opt/apr-util
                    elif [[ `uname` == "Linux" ]]; then
                        ../configure --prefix=$rosenv --with-apr=/usr/local/opt/apr --with-apr-util=/usr/local/opt/apr-util
                    fi
                    
                    make -j 8
                    set +e; make install; set -e

                    cd ../.. && rm -rf apache-log4cxx-$vlog4
                else
                    echo
                    echo "     - log4cxx has been installed."
                    echo
                fi
                ;;
            *)
                echo " $app is NOT set to be installed manually!"
                echo
                ;;
        esac
    done
}

#-----------------------------------------------------------------------------------
function set_compiler {
        case $compiler in
        gnu)
            export CC=gcc-11
            export CXX=g++-11
            ;;
        intel)
            export CC=icc
            export CXX=icpc
            ;;
        clang)
            export CC=clang
            export CXX=clang++
            ;;
    esac

    echo
    echo "* ------ "
    echo "* compilers are: "
    echo "     - C compiler:        $CC"
    echo "     - CXX compiler:      $CXX"
    echo
}

#-----------------------------------------------------------------------------------

function set_env {
    case $distribution in
        melodic | noetic)
            if [[ $os == "Darwin" ]]; then
                export CXXFLAGS="-I$rosenv/include $CXXFLAGS"

                export OPENSSL_ROOT_DIR=$(ibrew --prefix openssl)
                export CXXFLAGS="-I$(ibrew --prefix openssl)/include $CXXFLAGS"
                export CMAKE_PREFIX_PATH="$(ibrew --prefix openssl):$CMAKE_PREFIX_PATH"

                export CMAKE_PREFIX_PATH="$(ibrew --prefix opencv)/include/opencv4:$CMAKE_PREFIX_PATH"
                export CMAKE_PREFIX_PATH="$(ibrew --prefix qt@5):$CMAKE_PREFIX_PATH"
                export PATH="$(ibrew --prefix qt@5)/bin:$PATH"
                export PATH="$(ibrew --prefix opencv)/bin:$PATH"

                export CMAKE_PREFIX_PATH="$rosenv/PyQt5:$CMAKE_PREFIX_PATH"

            elif [[ $os == "Linux" ]]; then
                export CMAKE_PREFIX_PATH="/usr/include/eigen3:$CMAKE_PREFIX_PATH"
                export CMAKE_PREFIX_PATH="$catkin/src/catkin:$CMAKE_PREFIX_PATH"

                export CMAKE_MODULE_PATH="$CMAKE_PREFIX_PATH"
            fi
            ;;
        foxy)
            if [[ $os == "Darwin" ]]; then
                export OPENSSL_ROOT_DIR=$(ibrew --prefix openssl)

                export CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH:/usr/local/opt/bison
                export PATH="/usr/local/opt/bison/bin:$PATH"

                export CMAKE_PREFIX_PATH="$(ibrew --prefix opencv)/include/opencv4:$CMAKE_PREFIX_PATH"
                export CMAKE_PREFIX_PATH="$(ibrew --prefix qt@5):$CMAKE_PREFIX_PATH"
                export PATH="$(ibrew --prefix qt@5)/bin:$PATH"
                export PATH="$(ibrew --prefix opencv)/bin:$PATH"

                export CMAKE_PREFIX_PATH="$(ibrew --prefix assimp):$CMAKE_PREFIX_PATH"
                export PATH="$(ibrew --prefix assimp)/bin:$PATH"
            elif [[ $os == "Linux" ]]; then
                export CMAKE_PREFIX_PATH="$CMAKE_PREFIX_PATH:/usr/include/eigen3"
                export LDFLAGS="-latomic $LDFLAGS"
            fi
            ;;
    esac

    source $rosenv/bin/activate
    export CMAKE_PREFIX_PATH="$rosenv:$CMAKE_PREFIX_PATH"
    export CMAKE_PREFIX_PATH="$rosenv/PyQt5:$CMAKE_PREFIX_PATH"
    export PATH="$rosenv/bin:$PATH"

    echo
    echo "* ------ "
    echo "* environments are: "

    echo "     - CMAKE_PREFIX_PATH:  $CMAKE_PREFIX_PATH"
    echo "     - CMAKE_INCLUDE_PATH: $CMAKE_INCLUDE_PATH"
    echo "     - LDFLAGS:            $LDFLAGS"
    echo "     - CXXFLAGS:           $CXXFLAGS"
    echo "     - PYTHON ENV:         $rosenv "
    echo

    source $rosenv/bin/activate
}

#-----------------------------------------------------------------------------------
function get_src {
    source $rosenv/bin/activate

    if [[ $1 == "" ]]; then
        var=desktop
    else
        var=$1
    fi

    echo
    echo "* ------- "
    echo
    echo "* create catkin workspace --- $catkin & ./src_$var ..."
    cd $catkin && mkdir -p src_$var

    echo
    echo "* ------- "
    echo "* download ros_$var source codes ..."
    echo

    if [ ! -f ${distribution}_$var.repos ]; then
        case $distribution in
            melodic | noetic)
                rosinstall_generator $var --rosdistro $distribution --deps --tar > ${distribution}_$var.repos
                ;;
            foxy)
                wget https://raw.githubusercontent.com/ros2/ros2/$distribution/ros2.repos -O \
                     ${distribution}_$var.repos
                ;;
        esac
    fi

    vcs import src_$var < ${distribution}_$var.repos

    rm -rf ./src
    ln -s src_$var src
}

#-----------------------------------------------------------------------------------
function patch_src {
    echo
    echo "* ------- "
    echo "* patch ros source codes ..."
    echo

    case $distribution in
        melodic | noetic)
#           cp $catkin/patch/tf2_CMakeLists.txt \
#              $catkin/src/geometry2/tf2/CMakeLists.txt

#           cp $catkin/patch/catkinConfig.cmake.in \
#              $catkin/src/catkin/cmake/catkinConfig.cmake.in
            ;;
        foxy)
            cp $catkin/patch/rviz_assimp_vendor-extras.cmake.in  \
               $catkin/src/ros2/rviz/rviz_assimp_vendor/.

            mkdir -p $bipath && cd $bipath && tar zxvf $catkin/patch/${distribution}_build_patch.tgz
            ;;
    esac
}

#-----------------------------------------------------------------------------------
function ros_init {
    if [ ! -f /etc/ros/rosdep/sources.list.d/20-default.list ]; then
        sudo rosdep init
    fi
    rosdep update

    if [[ $os == "Linux" ]]; then
        case $distribution in
            melodic | noetic)
                rosdep install --from-paths ./src --ignore-packages-from-source --rosdistro $distribution -y
                ;;
            foxy)
                rosdep install --from-paths src --ignore-src -y --skip-keys "fastcdr rti-connext-dds-5.3.1 urdfdom_headers"
                ;;
        esac
    fi
}

#-----------------------------------------------------------------------------------
# Note: due to an unresolved issue with SIP, Qt@5, and PyQt5,
# we need to disable python_qt_binding to have the build succeed.
# This will be removed when the issue is resolved, see:
#    https://github.com/ros-visualization/python_qt_binding/issues/103
# REASON: both Linux and MAC, sip new version could NOT include sipconfig.py.

function build_src {
    cd $bipath
    rm -rf ./src
    ln -s $catkin/src .

    export build_base=$bipath/build
    export install_base=$bipath/install
    export devel_base=$bipath/devel

    # mkdir -p $build_base
    # mkdir -p $install_base
    # if [[ $distribution == "noetic" ]]; then
    #     mkdir -p $devel_base
    # fi

    if [[ $os == "Linux" ]]; then
#               --packages-skip-by-dep python_qt_binding              \
        colcon_comp () {
            opt1="--log-base /dev/null                                    \
                  build                                                   \
                  --symlink-install                                       \
                  --build-base   $build_base                              \
                  --install-base $install_base                            \
                  --event-handlers console_direct+                        "
            
            opt2="--cmake-args -DCMAKE_CXX_STANDARD=14                    \
                               -DCMAKE_PREFIX_PATH="$CMAKE_PREFIX_PATH"   \
                               -DCMAKE_SHARED_LINKER_FLAGS=$LDFLAGS       "

            colcon $opt1 $@ $opt2
        }

        catkin_make_comp () {
            opt1="-DCMAKE_BUILD_TYPE=Release                              \
                  -DPYTHON_EXECUTABLE=$rosenv/bin/python3                 "

            opt2="--cmake-args -DCMAKE_CXX_STANDARD=14                    \
                               -DCMAKE_PREFIX_PATH="$CMAKE_PREFIX_PATH"   \
                               -DCMAKE_SHARED_LINKER_FLAGS=$LDFLAGS       "

            if [[ $1 == "current" ]]; then
                shift
                ./src/catkin/bin/catkin_make          $opt1 $@ $opt2
            elif [[ $1 == "isolated" ]]; then
                shift
                ./src/catkin/bin/catkin_make_isolated $opt1 $@ $opt2
            fi
        }

    elif [[ $os == "Darwin" ]]; then
        colcon_comp () {
            opt1="--log-base /dev/null                                    \
                  build                                                   \
                  --symlink-install                                       \
                  --build-base   $build_base                              \
                  --install-base $install_base                            \
                  --event-handlers console_direct+                        "
            
            opt2="--cmake-args -DCMAKE_CXX_STANDARD=17                    \
                               -DCMAKE_PREFIX_PATH="$CMAKE_PREFIX_PATH"   "

            colcon $opt1 $@ $opt2
        }

        catkin_make_comp () {
            opt1="-DCMAKE_FIND_FRAMEWORK=NEVER                            \
                  -DCMAKE_BUILD_TYPE=Release                              \
                  -DPYTHON_EXECUTABLE=$rosenv/bin/python3                 "

            opt2="--cmake-args -DCMAKE_CXX_STANDARD=17                    \
                               -DCMAKE_PREFIX_PATH="$CMAKE_PREFIX_PATH"   "

            # opt3="--make-args  CXXFLAGS="$CXXFLAGS" "

            if [[ $1 == "current" ]]; then
                shift
                ./src/catkin/bin/catkin_make          $opt1 $@ $opt2 $opt3
            elif [[ $1 == "isolated" ]]; then
                shift
                ./src/catkin/bin/catkin_make_isolated --install $opt1 $@ $opt2 $opt3
            fi
        }

        catkin_comp () {
            catkin config --install \
                   --install-space  $install_base \
                   --cmake-args \
                     -DCATKIN_EBABLE_TESTING=1 \
                     -DCMAKE_BUILD_TYPE=Release \
                     -DCMAKE_FIND_FRAMEWORK=LAST \
                     -DPYTHON_EXECUTALBE=$rosenv/bin/python3 

            catkin build --limit-status-rate 1
        }

    fi

    case $package in
        all)
            if [[ $distribution == "foxy" ]]; then
                colcon_comp
            elif [[ $distribution == "melodic" || $distribution == "noetic" ]]; then
                catkin_make_comp current   -DCATKIN_WHITELIST_PACKAGES=""
#               catkin_make_comp isolated  
#               catkin_comp
            fi
            ;;
        *)
            echo "now compiling $package ... "
            echo
            if [[ $distribution == "foxy" ]]; then
                colcon_comp --packages-select $package
            elif [[ $distribution == "melodic" || $distribution == "noetic" ]]; then
#               catkin_make_comp current   -DCATKIN_WHITELIST_PACKAGES="$package"
                catkin_make_comp isolated  --pkg=$package
            fi
            ;;
    esac
}

#-----------------------------------------------------------------------------------
# main function

set -e

if [[ $os == "Darwin" ]]; then
    ibrew () {
        arch -x86_64 /usr/local/bin/brew $@
    }
fi

print_welcome
set_path

if [[ $step == "all" || $step == "auxilary" ]]; then
    set_compiler
    set_auxilary
fi

if [[ $step == "all" || $step == "getsrc" ]]; then
    get_src
    patch_src
    ros_init
fi

if [[ $step == "all" || $step == "compile" ]]; then
    set_compiler
    set_env
    patch_src
    build_src
fi
